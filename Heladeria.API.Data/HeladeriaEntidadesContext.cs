// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Heladeria.API.Data
{
    public partial class HeladeriaEntidadesContext : DbContext
    {
        public HeladeriaEntidadesContext()
        {
        }

        public HeladeriaEntidadesContext(DbContextOptions<HeladeriaEntidadesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AreaEnvio> AreaEnvio { get; set; }
        public virtual DbSet<Articulo> Articulo { get; set; }
        public virtual DbSet<Categoria> Categoria { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Compra> Compra { get; set; }
        public virtual DbSet<CondicionFiscal> CondicionFiscal { get; set; }
        public virtual DbSet<DetalleCompra> DetalleCompra { get; set; }
        public virtual DbSet<DetalleVenta> DetalleVenta { get; set; }
        public virtual DbSet<InformeCaja> InformeCaja { get; set; }
        public virtual DbSet<InformeMasVendidos> InformeMasVendidos { get; set; }
        public virtual DbSet<InformeMayorGanancia> InformeMayorGanancia { get; set; }
        public virtual DbSet<Pedido> Pedido { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Repartidor> Repartidor { get; set; }
        public virtual DbSet<TipoPago> TipoPago { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Venta> Venta { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AreaEnvio>(entity =>
            {
                entity.HasKey(e => e.IdAreaEnvio);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Precio).HasColumnType("money");
            });

            modelBuilder.Entity<Articulo>(entity =>
            {
                entity.HasKey(e => e.IdArticulo);

                entity.HasIndex(e => e.Codigo, "IX_Articulo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.Idcategoria).HasColumnName("IDCategoria");

                entity.Property(e => e.Imagen).HasColumnType("image");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.PrecioCompra).HasColumnType("money");

                entity.Property(e => e.PrecioVenta).HasColumnType("money");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.Articulo)
                    .HasForeignKey(d => d.IdProveedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Articulo_Proveedor");

                entity.HasOne(d => d.IdcategoriaNavigation)
                    .WithMany(p => p.Articulo)
                    .HasForeignKey(d => d.Idcategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Articulo_Categoria");
            });

            modelBuilder.Entity<Categoria>(entity =>
            {
                entity.HasKey(e => e.IdCategoria);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Cliente>(entity =>
            {
                entity.HasKey(e => e.IdCliente);

                entity.HasIndex(e => e.Cuit, "IX_Cliente")
                    .IsUnique();

                entity.Property(e => e.Cuit)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("CUIT");

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.HasOne(d => d.IdCondicionFiscalNavigation)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.IdCondicionFiscal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cliente_CondicionFiscal");
            });

            modelBuilder.Entity<Compra>(entity =>
            {
                entity.HasKey(e => e.IdCompra);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.HasOne(d => d.IdArticuloNavigation)
                    .WithMany(p => p.Compra)
                    .HasForeignKey(d => d.IdArticulo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Compra_Articulo");

                entity.HasOne(d => d.IdDetalleCompraNavigation)
                    .WithMany(p => p.Compra)
                    .HasForeignKey(d => d.IdDetalleCompra)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Compra_DetalleCompra1");
            });

            modelBuilder.Entity<CondicionFiscal>(entity =>
            {
                entity.HasKey(e => e.IdCondicionFiscal);

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<DetalleCompra>(entity =>
            {
                entity.HasKey(e => e.IdDetalleCompra);

                entity.HasIndex(e => e.Lote, "IX_DetalleCompra")
                    .IsUnique();

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.DetalleCompra)
                    .HasForeignKey(d => d.IdProveedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetalleCompra_Proveedor");
            });

            modelBuilder.Entity<DetalleVenta>(entity =>
            {
                entity.HasKey(e => e.IdDetalleVenta);

                entity.Property(e => e.PrecioUnitario).HasColumnType("money");

                entity.HasOne(d => d.IdArticuloNavigation)
                    .WithMany(p => p.DetalleVenta)
                    .HasForeignKey(d => d.IdArticulo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DetalleVenta_Articulo");
            });

            modelBuilder.Entity<InformeCaja>(entity =>
            {
                entity.Property(e => e.Efectivo).HasColumnType("money");

                entity.Property(e => e.OtroMedio).HasColumnType("money");
            });

            modelBuilder.Entity<InformeMasVendidos>(entity =>
            {
                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<InformeMayorGanancia>(entity =>
            {
                entity.Property(e => e.Monto).HasColumnType("money");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Pedido>(entity =>
            {
                entity.HasKey(e => e.IdPedido);

                entity.Property(e => e.Destino)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Total).HasColumnType("money");

                entity.HasOne(d => d.IdAreaEnvioNavigation)
                    .WithMany(p => p.Pedido)
                    .HasForeignKey(d => d.IdAreaEnvio)
                    .HasConstraintName("FK_Pedido_AreaEnvio");

                entity.HasOne(d => d.IdArticuloNavigation)
                    .WithMany(p => p.Pedido)
                    .HasForeignKey(d => d.IdArticulo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pedido_Articulo");

                entity.HasOne(d => d.IdRepartidorNavigation)
                    .WithMany(p => p.Pedido)
                    .HasForeignKey(d => d.IdRepartidor)
                    .HasConstraintName("FK_Pedido_Repartidor");

                entity.HasOne(d => d.IdTipoPagoNavigation)
                    .WithMany(p => p.Pedido)
                    .HasForeignKey(d => d.IdTipoPago)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pedido_TipoPago");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Pedido)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pedido_Usuario");
            });

            modelBuilder.Entity<Proveedor>(entity =>
            {
                entity.HasKey(e => e.IdProveedor);

                entity.HasIndex(e => e.Codigo, "IX_Proveedor")
                    .IsUnique();

                entity.HasIndex(e => e.Cuit, "IX_Proveedor_1")
                    .IsUnique();

                entity.Property(e => e.Ciudad)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.Cuit)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("CUIT");

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.Pais)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.Telefono)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.HasOne(d => d.IdCondicionFiscalNavigation)
                    .WithMany(p => p.Proveedor)
                    .HasForeignKey(d => d.IdCondicionFiscal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proveedor_CondicionFiscal");
            });

            modelBuilder.Entity<Repartidor>(entity =>
            {
                entity.HasKey(e => e.IdRepartidor);

                entity.HasIndex(e => e.Dni, "IX_Repartidor")
                    .IsUnique();

                entity.Property(e => e.Celular)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.Dni)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("DNI");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<TipoPago>(entity =>
            {
                entity.HasKey(e => e.IdTipoPago);

                entity.HasIndex(e => e.Codigo, "IX_TipoPago")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.IdUsuario);

                entity.HasIndex(e => e.Nombre, "IX_Usuario")
                    .IsUnique();

                entity.Property(e => e.Contrasenia)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Venta>(entity =>
            {
                entity.HasKey(e => e.IdVenta);

                entity.Property(e => e.Comentario).HasColumnType("text");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.Venta)
                    .HasForeignKey(d => d.IdCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Venta_Cliente");

                entity.HasOne(d => d.IdDetalleNavigation)
                    .WithMany(p => p.Venta)
                    .HasForeignKey(d => d.IdDetalle)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Venta_DetalleVenta");

                entity.HasOne(d => d.IdTipoPagoNavigation)
                    .WithMany(p => p.Venta)
                    .HasForeignKey(d => d.IdTipoPago)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Venta_TipoPago");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}